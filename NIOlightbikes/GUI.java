import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import java.rmi.RemoteException;
import javax.swing.*;

/**
 * This is the Graphical User Interface (GUI). Its main role is to display the status of the game as well
 * as receiving user input and transmitting this information to the core process.
 * @author Sam, Johan & Luther
 */
public class GUI extends javax.swing.JFrame {

    //===============================
    //=== ERROR MESSAGES & TITLES ===
    //===============================

    private static final String SERVER_NOT_FOUND_MESSAGE = "Failed to connect to the server.";
    private static final String SERVER_NOT_FOUND_TITLE = "RmiServerMain connection error";

    //=======================
    //=== OTHER VARIABLES ===
    //=======================

    static final long serialVersionUID = 201606281539L;
    
    //Objects to store the image and the 2D environment
    BufferedImage image;
    Graphics2D g2;
    ImagePanel jpBoard;

    //Inner representation of the grid
    private static int[][] iGrid = new int[100][100];

    private IClient client;
    private boolean goingSolo = false;

    //===================
    //=== CONSTRUCTOR ===
    //===================

    /**
     * Creates a new game GUI form
     */
    public GUI(IClient client) {
        this.client = client;

        // Added components
        solo = new JRadioButton("Solo");
        solo.setSelected(true);
        multiplayer = new JRadioButton("multiplayer");

        ButtonGroup optionPlay = new ButtonGroup();
        optionPlay.add(solo);
        optionPlay.add(multiplayer);
        initComponents();

        /* GENERATED BY NETBEANS 
         * Just copied here so as to change the JPanel and use my custom one (that includes an image)
         */
        image = new BufferedImage(400, 400, BufferedImage.TYPE_INT_ARGB);
        jpBoard = new ImagePanel(true,image);

        jpBoard.setMinimumSize(new java.awt.Dimension(400, 400));
        jpBoard.setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jpBoard);
        jpBoard.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                            .addComponent(solo)
                            .addComponent(multiplayer)
                            .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYourScore, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jpBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(solo)
                        .addComponent(multiplayer)
                    .addComponent(jLabel1)
                    .addComponent(jYourScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jpBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
        /* END GENERATED BY NETBEANS */

				//Resets everything
        newGrid();

				//Adds the keyboard listener
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
        
        //Inits the image board (400x400, filled with black)
        g2 = jpBoard.image.createGraphics();
        g2.setColor(Color.BLACK);
        g2.fillRect(0, 0, 400, 400);

        //Makes it visible and repainted
        jpBoard.setVisible(true);
        jpBoard.repaint();

				//To force the GUI to refresh its frame
        this.repaint();
    }

    //=====================
    //=== GUI Functions ===
    //=====================

    /**
     * Resets the inner representation of the grid
     */
    private void newGrid()
    {
        for(int i = 0; i < 100; i++)
        {
            for (int j = 0; j < 100; j++)
            {
                iGrid[i][j] = 0;
            }
        }
    }

    /**
     * Key listener
     */
    private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getID() == KeyEvent.KEY_PRESSED) {
                //Detects when a key has been pressed
                formKeyPressed(e);
            }
            return false;
        }
    }

    /**
     * This is where the grid is refreshed with the new one, given as argument
     * @param newGrid The new grid
     */
    private void refreshGrid(int[][] newGrid)
    {
        boolean bChanged = false;
        for (int i = 0; i < 100; i++)
        {
            for(int j = 0; j < 100; j++)
            {
                if(newGrid[i][j] != iGrid[i][j])
                {
                    //Detects when a tile has been changed
                    bChanged = true;
                    iGrid[i][j] = newGrid[i][j];
                    
                    //Apply the color corresponding to the given player
                    //One tile = 4x4 px
                    if(newGrid[i][j] == 1)
                    {
                        g2.setColor(Color.RED);
                        g2.fillRect(i*4, j*4, 4, 4);
                    }
                    else if(newGrid[i][j] == 2)
                    {
                        g2.setColor(Color.BLUE);
                        g2.fillRect(i*4, j*4, 4, 4);
                    }
                    else if(newGrid[i][j] == 3)
                    {
                        g2.setColor(Color.YELLOW);
                        g2.fillRect(i*4, j*4, 4, 4);
                    }
                    else if(newGrid[i][j] == 4)
                    {
                        g2.setColor(Color.GREEN);
                        g2.fillRect(i*4, j*4, 4, 4);
                    }
                }
            }
        }
        
        //Only repaint the frame when something has changed (efficiency)
        if(bChanged)
            this.repaint();
    }

    /**
     * This method updates the frame
     * @param score The current score of the player
     * @param grid The new grid
     * @param isGameOver Is the game over?
     * @param winnerName The name of the winner
     */
    public void update(int score, int[][] grid, boolean isGameOver, String winnerName)
    {
        //Updates the score
        jYourScore.setText(score+"");

        //Refresh the image
        refreshGrid(grid);

        //If the game is over, a message is displayed on screen with the name of the winner
        if(isGameOver)
        {
            if(!goingSolo) {
                try {
                    // Quit the game session if in multiplayer
                    client.quitGame();
                } catch (RemoteException e) {
                    showServerNotFoundDialog();
                    System.out.println("Client error: " + e.getMessage());
                }
            }
            // Show the winner dialog
            showWinnerDialog(winnerName, score);
        }
    }

    //========================
    //=== Dialog Functions ===
    //========================

    /**
     * Shows the 'server not found' error dialog
     */
    private void showServerNotFoundDialog(){
        JOptionPane.showMessageDialog(this,
                SERVER_NOT_FOUND_MESSAGE,
                SERVER_NOT_FOUND_TITLE,
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Shows the 'winner" dialog
     * @param winnerName The name of the winner
     * @param score Your score
     */
    private void showWinnerDialog(String winnerName, int score){
        JOptionPane.showMessageDialog(this, "GAME OVER\n" + winnerName + " WINS!\nYour score : "+ score);
    }

    //======================
    //=== EVENT HANDLERS ===
    //======================

    /**
     * The play button has been pressed, we restart the game
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Checks which radio button is selected
        goingSolo = solo.isSelected();

        // Repaints the screen
        g2.setColor(Color.BLACK);
        g2.fillRect(0, 0, 400, 400);
        this.repaint();
        newGrid();

        try {
            // Tries to join a game
            client.joinGame(goingSolo);
        }
        catch (RemoteException e) {
            showServerNotFoundDialog();
            System.out.println("Client error: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * When we press the red X to close the window, we warn the server that the client is closing.
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            client.quitApp();
        } catch (RemoteException e) {
            System.out.println("Client error: " + e.getMessage());
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * A key has been pressed. If a game is in progress, we must warn the core
     * @param evt
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Try to change the direction of the line depending on the key being pressed
        try {
            if(client.isPlayerAlive())
            {
                char currentDir = client.getCurrentDirection();
                switch(evt.getKeyCode())
                {
                    case KeyEvent.VK_LEFT :
                        if(currentDir != 'R') client.setCurrentDirection('L');
                        break;
                    case KeyEvent.VK_RIGHT :
                        if(currentDir != 'L') client.setCurrentDirection('R');
                        break;
                    case KeyEvent.VK_UP :
                        if(currentDir != 'D') client.setCurrentDirection('U');
                        break;
                    case KeyEvent.VK_DOWN :
                        if(currentDir != 'U') client.setCurrentDirection('D');
                        break;
                    default : break;
                }
            }
        } catch (RemoteException e) {
            showServerNotFoundDialog();
            System.out.println("Client error: " + e.getMessage());
        }
    }//GEN-LAST:event_formKeyPressed

    //=================
    //=== GENERATED ===
    //=================

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jYourScore = new javax.swing.JTextField();
        ShowLoginGUI = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jButton1.setText("Play");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Your Score");

        jYourScore.setText("0");
        jYourScore.setEnabled(false);

        ShowLoginGUI.setEditable(false);
        //ShowLoginGUI.setBackground(new java.awt.Color(255, 255, 0));
        ShowLoginGUI.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        ShowLoginGUI.setText("jTextField1");
        ShowLoginGUI.setForeground(Color.WHITE);
        ShowLoginGUI.setBackground(Color.GRAY);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYourScore, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(ShowLoginGUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(jButton1)))
                .addContainerGap(261, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jYourScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 454, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(ShowLoginGUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setShowLoginGUI(String showLoginGUI) {
        ShowLoginGUI.setText(showLoginGUI);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField ShowLoginGUI;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jYourScore;
    private javax.swing.JRadioButton solo;
    private javax.swing.JRadioButton multiplayer;
    // End of variables declaration//GEN-END:variables
}
